---
AWSTemplateFormatVersion: '2010-09-09'

Description: S3 buckets for Connect

Parameters:

  pMasterUserPassword:
    Type: String
    Description: The password
    Default: "fH!sgdfhgdr32efd"

  pNodeType:
    Type: String
    Description: The instance type
    Default: dc2.large

  pPrivateSecurityGroup:
    Type: String
    Description: The SG to assign the cluster to
    Default: sg-03c217fb8cb9b8959

Mappings:

  RegionMap:
    eu-central-1:
      SubnetPrivateA: subnet-0506379449d5e6e36
      SubnetPrivateB: subnet-016ac3e651bf2cadd
      PrivateSecurityGroup: sg-03c217fb8cb9b8959
      KmsId: arn:aws:kms:eu-central-1:389839695252:key/016d2f73-b518-44ea-aa3b-08fbe87e8e6b

    eu-west-1:
      SubnetPrivateA: subnet-a755e5ef
      SubnetPrivateB: subnet-c2b25f98
      PrivateSecurityGroup: sg-c54191b8
      KmsId: arn:aws:kms:eu-central-1:389839695252:key/016d2f73-b518-44ea-aa3b-08fbe87e8e6b

Resources:

  rConnectRedshiftClusterSubnetGroup:
    Type: "AWS::Redshift::ClusterSubnetGroup"
    Properties:
      Description: The Redshift Cluster Subnet Group
      SubnetIds:
        - !FindInMap [ RegionMap, !Ref "AWS::Region", SubnetPrivateA ]
        - !FindInMap [ RegionMap, !Ref "AWS::Region", SubnetPrivateB ]

  rConnectRedshiftCluster:
    Type: "AWS::Redshift::Cluster"
    Properties:
      DBName: "connect-db"
      MasterUsername: "master"
      MasterUserPassword: !Ref pMasterUserPassword
      NodeType: !Ref pNodeType
      ClusterType: "single-node"
      ClusterSubnetGroupName: !Ref rConnectRedshiftClusterSubnetGroup
      VpcSecurityGroupIds:
#        - !Ref pPrivateSecurityGroup
        - !FindInMap [ RegionMap, !Ref "AWS::Region", PrivateSecurityGroup ]
      PubliclyAccessible: false
      IamRoles:
        - !GetAtt rConnectRedshiftRole.Arn
#      KmsKeyId: !FindInMap [ RegionMap, !Ref "AWS::Region", KmsId ]
      Encrypted: true
      Tags:
        - Key: project
          Value: connect-jsd

  rConnectRedshiftRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:Get*
            - s3:List*
            Effect: Allow
            Resource:
              - '*'
            Sid: AllowAccessToS3Bucket
          - Action:
            - kms:Decrypt
            - kms:GenerateDataKey
            - kms:Encrrypt
            Effect: Allow
            Resource: '*'
            Sid: AllowAccessToKMSKey
          - Action:
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: s3-and-kms-access-policy
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role'

Outputs:

  ConnectRedshiftCluster:
    Value: !Ref rConnectRedshiftCluster
